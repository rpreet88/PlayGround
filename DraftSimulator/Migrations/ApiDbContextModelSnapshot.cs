// <auto-generated />
using System;
using DraftSimulator;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DraftSimulator.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DraftSimulator.DraftEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drafts");
                });

            modelBuilder.Entity("DraftSimulator.DraftTeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DraftId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumPlayers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DraftId");

                    b.ToTable("DraftTeams");
                });

            modelBuilder.Entity("DraftSimulator.PlayerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentAge")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DraftTeamId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PrimaryNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ShootsCatches")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DraftTeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DraftSimulator.PositionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerPositions");
                });

            modelBuilder.Entity("DraftSimulator.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("SportsTeams");
                });

            modelBuilder.Entity("DraftSimulator.DraftTeamEntity", b =>
                {
                    b.HasOne("DraftSimulator.DraftEntity", "Draft")
                        .WithMany("DraftTeams")
                        .HasForeignKey("DraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DraftTeam_Draft");

                    b.Navigation("Draft");
                });

            modelBuilder.Entity("DraftSimulator.PlayerEntity", b =>
                {
                    b.HasOne("DraftSimulator.DraftTeamEntity", "DraftTeam")
                        .WithMany("Players")
                        .HasForeignKey("DraftTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Player_DraftTeam");

                    b.Navigation("DraftTeam");
                });

            modelBuilder.Entity("DraftSimulator.PositionEntity", b =>
                {
                    b.HasOne("DraftSimulator.PlayerEntity", "Player")
                        .WithOne("Position")
                        .HasForeignKey("DraftSimulator.PositionEntity", "PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Player_Position");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DraftSimulator.TeamEntity", b =>
                {
                    b.HasOne("DraftSimulator.PlayerEntity", "Player")
                        .WithOne("Team")
                        .HasForeignKey("DraftSimulator.TeamEntity", "PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Player_SportsTeam");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DraftSimulator.DraftEntity", b =>
                {
                    b.Navigation("DraftTeams");
                });

            modelBuilder.Entity("DraftSimulator.DraftTeamEntity", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("DraftSimulator.PlayerEntity", b =>
                {
                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Team")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
